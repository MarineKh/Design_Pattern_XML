<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="creational.css"?>
<!DOCTYPE root[
  <!ENTITY wiki "https://en.wikipedia.org/wiki/">
 ]>
<html xmlns:html="http://www.w3.org/1999/xhtml">
	<html:head>
		<html:meta charset="UTF-8"/>
		<html:meta name="description" content="XML with namespace"/>
		<html:meta name="keywords" content="XML,CSS"/>
		<html:meta name="author" content="KhloyanMarine"/>
		<!-- <html:meta http-equiv="refresh" content="30"/>  -->
		<html:link rel="alternate" type="application/atom+xml" title="Wikipedia" href="Software_design_pattern"/>
		<!-- next and prev link -->
	</html:head>
	<html:body>
		<html:root>
			<html:table>
				<html:caption>
					<html:a class="cap" title="Creational patterns" href="&wiki;Creational_pattern">Creational patterns</html:a>
				</html:caption>
				<html:thead> 
					<html:tr>
						<html:th>Name</html:th>
						<html:th>Description</html:th>
						<html:th class="link">In
							<html:a class="design" title="Design Patterns(book)" target="_blank" href="&wiki;Design_Patterns">Design Patterns</html:a>
						</html:th>
						<html:th>In
							<html:a class="code" title="Code Complete" href="&wiki;Creational_pattern">Code Complete
								<html:sup>
								<html:a title='McConnell, Steve (June 2004). "Design in Construction". Code Complete (2nd ed.). Microsoft Press. p. 104. ISBN 978-0-7356-1967-8. Table 5.1 Popular Design Patterns' target="_blank" href="&wiki;Software_design_pattern#cite_note-McConnell2004-18"> <html:q>1</html:q></html:a>
								</html:sup>
							</html:a>
						</html:th>
						<html:th>Other</html:th>
					</html:tr>
				</html:thead>
				<html:tbody>
					<html:tr>
						<html:td>
							<html:a class="links" title="Abstract factory pattern" target="_blank" href="&wiki;Abstract_factory_pattern">Abstract factory</html:a>
						</html:td>
						<html:td class="desc">Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</html:td>
						<html:td class="green">Yes</html:td>
						<html:td class="green">Yes</html:td>
						<html:td class="gray">
							<html:abbr title="Not available">N/A</html:abbr>
						</html:td>
					</html:tr>
					<html:tr>
						<html:td>
							<html:a class="links" title="Builder pattern" target="_blank" href="&wiki;Builder_pattern">Builder</html:a>
						</html:td>
						<html:td class="desc">Separate the construction of a complex object from its representation, allowing the same construction process to create various representations.</html:td>
						<html:td class="green">Yes</html:td>
						<html:td class="red">No</html:td>
						<html:td class="gray">
							<html:abbr title="Not available">N/A</html:abbr>
						</html:td>
					</html:tr>
					<html:tr>
						<html:td>
							<html:a class="links" title="Factory method pattern" target="_blank" href="&wiki;Factory_method_pattern">Factory method</html:a>
						</html:td>
						<html:td class="desc">Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses
							<html:a class="last" title="Dependency injection" target="_blank" href="&wiki;Dependency_injection">(dependency injection
								<html:sup>
								<html:a title='"Design Patterns: Dependency injection". Retrieved 2011-04-13. The use of a factory class is one common way to implement DI."' target="_blank" href="&wiki;Software_design_pattern#cite_note-19"> <html:q>2</html:q>
								</html:a>
								</html:sup>
							).</html:a>
						</html:td>
						<html:td class="green">Yes</html:td>
						<html:td class="green">Yes</html:td>
						<html:td class="gray">
							<html:abbr title="Not available">N/A</html:abbr>
						</html:td>
					</html:tr>
					<html:tr>
						<html:td>
							<html:a class="links" title="Lazy initialization pattern" target="_blank" href="&wiki;Lazy_initialization">Lazy initialization</html:a>
						</html:td>
						<html:td class="desc">Tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed. This pattern appears in the GoF catalog as "virtual proxy", an implementation strategy for the
							<html:a class="prox" title="Proxy pattern" target="_blank" href="&wiki;Proxy_pattern">Proxy</html:a>
							<html:span class="pat">pattern.</html:span>
						</html:td> 
						<html:td class="green">Yes</html:td>
						<html:td class="red">No</html:td>
						<html:td class="green"><html:abbr title="Patterns of Enterprise Application Architecture">PoEAA</html:abbr>
							<html:sup>
								<html:a title='Fowler, Martin (2002). Patterns of Enterprise Application Architecture. Addison-Wesley. ISBN 978-0-321-12742-6.' target="_blank" href="&wiki;Software_design_pattern#cite_note-PoEAA-20"> 
									<html:q>3</html:q>
								</html:a>
							</html:sup>
						</html:td>
					</html:tr>
					<html:tr>
						<html:td>
							<html:a class="links" title="Multiton pattern" target="_blank" href="&wiki;Multiton_pattern">Multiton</html:a>
						</html:td>
						<html:td class="desc">Ensure a class has only named instances, and provide a global point of access to them.</html:td>
						<html:td class="red">No</html:td>
						<html:td class="red">No</html:td>
						<html:td class="gray">
							<html:abbr title="Not available">N/A</html:abbr>
						</html:td>
					</html:tr>
					<html:tr>
						<html:td>
							<html:a class="links" title="Object pool pattern" target="_blank" href="&wiki;Object_pool_pattern">Object pool</html:a>
						</html:td>
						<html:td class="desc">Avoid expensive acquisition and release of resources by recycling objects that are no longer in use. Can be considered a generalisation of
							<html:a class="pool1" title="Connection pool" target="_blank" href="&wiki;Connection_pool">connection pool</html:a> 
							<html:span class="and">and</html:span>
							<html:a class="pool2" title="Thread pool" target="_blank" href="&wiki;Thread_pool">thread pool</html:a>
							<html:span class="pats">patterns.</html:span>
						</html:td>
						<html:td class="red">No</html:td>
						<html:td class="red">No</html:td>
						<html:td class="gray">
							<html:abbr title="Not available">N/A</html:abbr>
						</html:td>
					</html:tr>
					<html:tr>
						<html:td>
							<html:a class="links" title="Prototype pattern" target="_blank" href="&wiki;Prototype_pattern">Prototype</html:a>
						</html:td>
						<html:td class="desc">Specify the kinds of objects to create using a prototypical instance, and create new objects from the 'skeleton' of an existing object, thus boosting performance and keeping memory footprints to a minimum.</html:td>
						<html:td class="green">Yes</html:td>
						<html:td class="red">No</html:td>
						<html:td class="gray">
							<html:abbr title="Not available">N/A</html:abbr>
						</html:td>
					</html:tr>
					<html:tr>
						<html:td>
							<html:a class="links" title="Resource acquisition is initialization" target="_blank" href="&wiki;Resource_Acquisition_Is_Initialization">Resource acquisition is initialization</html:a>
						</html:td>
						<html:td class="desc">Ensure that resources are properly released by tying them to the lifespan of suitable objects.</html:td>
						<html:td class="red">No</html:td>
						<html:td class="red">No</html:td>
						<html:td class="gray">
							<html:abbr title="Not available">N/A</html:abbr>
						</html:td>
					</html:tr>
					<html:tr>
						<html:td>
							<html:a class="links" title="Singleton pattern" type="simple" href="&wiki;Singleton_pattern">Singleton</html:a>
						</html:td>
						<html:td class="desc">Ensure a class has only one instance, and provide a global point of access to it.</html:td>
						<html:td class="green">Yes</html:td>
						<html:td class="green">Yes</html:td>
						<html:td class="gray">
							<html:abbr title="Not available">N/A</html:abbr>
						</html:td>
					</html:tr>
				</html:tbody>
			</html:table>
		 </html:root>
	</html:body>
</html>